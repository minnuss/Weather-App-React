{"version":3,"sources":["components/DisplayWeather.js","components/Weather.js","App.js","index.js"],"names":["DisplayWeather","props","data","cod","message","iconURL","weather","icon","className","name","sys","country","Date","toLocaleTimeString","main","temp","toFixed","src","alt","description","temp_max","temp_min","humidity","pressure","visibility","wind","speed","deg","sunrise","sunset","Weather","APIKEY","weatherURL","useState","city","setCity","setWeather","handleCityChange","e","target","value","weatherData","a","preventDefault","alert","fetch","res","json","setTimeout","document","querySelector","useEffect","inputCityName","inputButton","click","action","htmlFor","type","id","onChange","onClick","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"yPAIe,SAASA,EAAeC,GAAO,IAIlCC,EAASD,EAATC,KAER,GAAiB,QAAbA,EAAKC,IAEL,OAAO,6BAAKD,EAAKE,UAKrB,IAAMC,EAAU,oCAAsCH,EAAKI,QAAQ,GAAGC,KAAO,UAG7E,OACI,sBAAKC,UAAU,iBAAf,UACI,sBAAKA,UAAU,WAAf,UACI,uBAAMA,UAAU,YAAhB,UACKN,EAAKO,KADV,KACkBP,EAAKQ,IAAIC,QAD3B,eAGA,uBAAMH,UAAU,eAAhB,oBACW,IAAII,MAAOC,wBAEtB,+BACKX,EAAKY,KAAKC,KAAKC,QAAQ,GAD5B,IAEI,uCAEJ,sBAAKR,UAAU,cAAf,UACI,sBAAMA,UAAU,eAAhB,SACKN,EAAKI,QAAQ,GAAGQ,OAErB,qBAAKG,IAAKZ,EAASa,IAAKhB,EAAKI,QAAQ,GAAGQ,KAAO,gBAAiBN,UAAU,iBAC1E,sBAAMA,UAAU,sBAAhB,SACKN,EAAKI,QAAQ,GAAGa,oBAK7B,sBAAKX,UAAU,kBAAf,UACI,qBAAKA,UAAU,0BAAf,SACI,kCACI,+BACI,6BACI,8CAEJ,6BACI,iCACKN,EAAKY,KAAKM,SAASJ,QAAQ,GADhC,MACuCd,EAAKY,KAAKO,SAASL,QAAQ,GADlE,MACwE,4CAKhF,+BACI,6BACI,8CAEJ,6BACI,+BACKd,EAAKY,KAAKQ,gBAKvB,+BACI,6BACI,8CAEJ,6BACI,iCACKpB,EAAKY,KAAKS,SADf,eAMR,+BACI,6BACI,gDAEJ,6BACI,iCACKrB,EAAKsB,WAAa,IADvB,mBAQhB,qBAAKhB,UAAU,0BAAf,SACI,kCACI,+BACI,6BACI,0CAEJ,6BACI,kCACwB,GAAlBN,EAAKuB,KAAKC,MAAa,GAAGV,QAAQ,GADxC,iBAMR,+BACI,6BACI,oDAEJ,6BACI,iCACKd,EAAKuB,KAAKE,IADf,IACoB,oCADpB,cAMR,+BACI,6BACI,6CAEJ,6BACI,+BACK,IAAIf,KAAwB,IAAnBV,EAAKQ,IAAIkB,SAAgBf,4BAK/C,+BACI,6BACI,4CAEJ,6BACI,+BACK,IAAID,KAAuB,IAAlBV,EAAKQ,IAAImB,QAAehB,uCClIvD,SAASiB,IAEpB,IAAMC,EAAS,0CAETC,EAAa,qDAJW,EAONC,mBAAS,YAPH,mBAOvBC,EAPuB,KAOjBC,EAPiB,OASAF,mBAAS,IATT,mBASvB3B,EATuB,KASd8B,EATc,KAuB9B,SAASC,EAAiBC,GACtBH,EAAQG,EAAEC,OAAOC,OAxBS,SA4BfC,EA5Be,8EA4B9B,WAA2BH,GAA3B,iBAAAI,EAAA,6DACIJ,EAAEK,iBAEW,KAATT,GAAaU,MAAM,0BAH3B,SAKsBC,MAAMb,EAAaE,EAAO,gBAAkBH,GALlE,cAKUe,EALV,gBAMuBA,EAAIC,OAN3B,OAMU7C,EANV,OAQIkC,EAAWlC,GAGX8C,YAAW,WACeC,SAASC,cAAc,SAC/BV,MAAQ,KACvB,KAdP,6CA5B8B,sBAiD9B,OArCAW,qBAAU,WACN,IAAMC,EAAgBH,SAASC,cAAc,SACvCG,EAAcJ,SAASC,cAAc,eAG3CE,EAAcZ,MAAQ,WACtBa,EAAYC,QACZF,EAAcZ,MAAQ,KACvB,IA6BiB,QAAhBlC,EAAQH,KACc8C,SAASC,cAAc,SAE/BV,MAAQ,GAEtBQ,YAAW,WACPb,EAAQ,IACRC,EAAW,MACZ,MAGC,sBAAK5B,UAAU,UAAf,UACI,oBAAIA,UAAU,OAAd,uBACA,uBAEA,uBAAM+C,OAAO,GAAb,UACI,uBAAOC,QAAQ,OAAf,kBACA,uBACIC,KAAK,OACLC,GAAG,OACHjD,KAAK,OACLkD,SAAUtB,IAEd,wBAAQ7B,UAAU,aAAaoD,QAASnB,EAAxC,uBAGJ,6BAAKnC,EAAQF,cAMrB,sBAAKI,UAAU,UAAf,UACI,sBAAMA,UAAU,OAAhB,2BACA,uBAEA,uBAAM+C,OAAO,GAAb,UACI,uBAAOC,QAAQ,OAAf,kBACA,uBACIC,KAAK,OACLC,GAAG,OACHjD,KAAK,OACLkD,SAAUtB,IAEd,wBAAQ7B,UAAU,aAAaoD,QAASnB,EAAxC,uBAGHnC,GAAW,cAACN,EAAD,CAAgBE,KAAMI,OC1F/BuD,MARf,WACE,OACE,qBAAKrD,UAAU,MAAf,SACE,cAACsB,EAAD,OCANgC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFf,SAASgB,eAAe,W","file":"static/js/main.e6fc4881.chunk.js","sourcesContent":["import React from 'react'\nimport './displayWeather.css'\n\n\nexport default function DisplayWeather(props) {\n\n    // console.log(props)\n\n    const { data } = props\n    // IF DATA SOMEHOW HAS AN ERROR OF 404, DISPLAY ERROR MESSAGE\n    if (data.cod === '404') {\n        // resetCityInput()\n        return <h1>{data.message}</h1>\n    }\n\n    // WEATHER ICON\n    // https://openweathermap.org/weather-conditions\n    const iconURL = `http://openweathermap.org/img/wn/` + data.weather[0].icon + '@4x.png'\n    // console.log(iconURL)\n\n    return (\n        <div className=\"displayweather\">\n            <div className=\"maincard\">\n                <span className=\"cardtitle\">\n                    {data.name}, {data.sys.country}. Weather\n                </span>\n                <span className=\"cardsubtitle\">\n                    As of {new Date().toLocaleTimeString()}\n                </span>\n                <h1>\n                    {data.main.temp.toFixed(1)}C\n                    <sup>o</sup>\n                </h1>\n                <div className=\"central-box\">\n                    <span className=\"weather-main\">\n                        {data.weather[0].main}\n                    </span>\n                    <img src={iconURL} alt={data.weather[0].main + ' weather icon'} className=\"weather-icon\" />\n                    <span className=\"weather-description\">\n                        {data.weather[0].description}\n                    </span>\n                </div>\n            </div>\n\n            <div className=\"weather-details\">\n                <div className=\"weather-details-section\">\n                    <table>\n                        <tr>\n                            <td>\n                                <h4>High/Low: </h4>\n                            </td>\n                            <td>\n                                <span>\n                                    {data.main.temp_max.toFixed(1)} / {data.main.temp_min.toFixed(1)} C <sup>o</sup>\n                                </span>\n                            </td>\n                        </tr>\n\n                        <tr>\n                            <td>\n                                <h4>Humidity: </h4>\n                            </td>\n                            <td>\n                                <span>\n                                    {data.main.humidity}\n                                </span>\n                            </td>\n                        </tr>\n\n                        <tr>\n                            <td>\n                                <h4>Pressure: </h4>\n                            </td>\n                            <td>\n                                <span>\n                                    {data.main.pressure} hPa\n                                </span>\n                            </td>\n                        </tr>\n\n                        <tr>\n                            <td>\n                                <h4>Visibility: </h4>\n                            </td>\n                            <td>\n                                <span>\n                                    {data.visibility / 1000} Km\n                                </span>\n                            </td>\n                        </tr>\n                    </table>\n                </div>\n\n                <div className=\"weather-details-section\">\n                    <table>\n                        <tr>\n                            <td>\n                                <h4>Wind: </h4>\n                            </td>\n                            <td>\n                                <span>\n                                    {(data.wind.speed * 18 / 5).toFixed(2)} Km/hr\n                                </span>\n                            </td>\n                        </tr>\n\n                        <tr>\n                            <td>\n                                <h4>Wind Direction: </h4>\n                            </td>\n                            <td>\n                                <span>\n                                    {data.wind.deg} <sup>o</sup>deg\n                                </span>\n                            </td>\n                        </tr>\n\n                        <tr>\n                            <td>\n                                <h4>Sunrise: </h4>\n                            </td>\n                            <td>\n                                <span>\n                                    {new Date(data.sys.sunrise * 1000).toLocaleTimeString()}\n                                </span>\n                            </td>\n                        </tr>\n\n                        <tr>\n                            <td>\n                                <h4>Sunset: </h4>\n                            </td>\n                            <td>\n                                <span>\n                                    {new Date(data.sys.sunset * 1000).toLocaleTimeString()}\n                                </span>\n                            </td>\n                        </tr>\n                    </table>\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React, { useState, useEffect } from 'react'\nimport './weather.css'\nimport DisplayWeather from './DisplayWeather'\n\nexport default function Weather() {\n\n    const APIKEY = '&appid=a565e52fcc30456984fa9b7447b89b23'\n    // \n    const weatherURL = 'https://api.openweathermap.org/data/2.5/weather?q='\n\n    // STORE THE INPUT VALUE\n    const [city, setCity] = useState('Belgrade')\n    // STORE THE WEATHER DATA\n    const [weather, setWeather] = useState('')\n\n    // SET DEFAULT CITY - it's got to be a better way to do this.\n    useEffect(() => {\n        const inputCityName = document.querySelector('#city')\n        const inputButton = document.querySelector('.getweather')\n        // console.log(inputCityName)\n        // console.log(inputButton)\n        inputCityName.value = 'Belgrade'\n        inputButton.click()\n        inputCityName.value = ''\n    }, [])\n\n    // SET THE INPUT VALUE TO CITY STATE\n    function handleCityChange(e) {\n        setCity(e.target.value)\n    }\n\n    // GET THE WEATHER DATA FOR ENTERED CITY\n    async function weatherData(e) {\n        e.preventDefault()\n\n        if (city === '') alert('Please enter City name')\n        // https://openweathermap.org/current#name\n        const res = await fetch(weatherURL + city + '&units=metric' + APIKEY)\n        const data = await res.json()\n\n        setWeather(data)\n\n        // CLEAR INPUT AUTOMATICALLY WHEN DATA IS FETCHED\n        setTimeout(() => {\n            const inputCityName = document.querySelector('#city')\n            inputCityName.value = ''\n        }, 1000);\n    }\n\n    // console.log(weather)\n    // console.log(weather.cod)\n\n    // RESET ALL IF CITY NOT FOUND\n    if (weather.cod === '404') {\n        const inputCityName = document.querySelector('#city')\n        // console.log(inputCityName)\n        inputCityName.value = ''\n\n        setTimeout(() => {\n            setCity('')\n            setWeather('')\n        }, 1500)\n\n        return (\n            <div className=\"weather\">\n                <h1 className=\"main\">Try again</h1>\n                <br />\n\n                <form action=\"\" >\n                    <label htmlFor=\"city\">City</label>\n                    <input\n                        type=\"text\"\n                        id=\"city\"\n                        name=\"city\"\n                        onChange={handleCityChange}\n                    />\n                    <button className=\"getweather\" onClick={weatherData}>Submit</button>\n                </form>\n                {/* ERROR MESSAGE */}\n                <h1>{weather.message}</h1>\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"weather\">\n            <span className=\"main\">Weather Today</span>\n            <br />\n\n            <form action=\"\" >\n                <label htmlFor=\"city\">City</label>\n                <input\n                    type=\"text\"\n                    id=\"city\"\n                    name=\"city\"\n                    onChange={handleCityChange}\n                />\n                <button className=\"getweather\" onClick={weatherData}>Submit</button>\n            </form>\n            {/* IF DATA EXISTS, SEND DATA TO DISPLAYWEATHER COMPONENT */}\n            {weather && <DisplayWeather data={weather} />}\n        </div>\n    )\n\n\n}\n\n\n\n","import Weather from './components/Weather';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Weather />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}